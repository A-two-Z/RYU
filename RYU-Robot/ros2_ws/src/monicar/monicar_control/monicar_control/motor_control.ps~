#!/usr/bin/env python

"""
Node for control PCA9685 using teleop_twist_keyboard msg
referenced from donekycar
url : https://github.com/autorope/donkeycar/blob/dev/donkeycar/parts/actuator.py
"""

import time
import rclpy
from rclpy.node import Node
from rclpy.parameter import Parameter
from rclpy.logging import get_logger
from geometry_msgs.msg import Twist
import RPi.GPIO as GPIO

from .submodules.myutil import clamp, PCA9685, PWMThrottleRacer, PWMThrottle2Wheel, PWMThrottleHat, PWMSteering

IIC_BUS = 1 

global speed_pulse
global steering_pulse

class VehicleNode(Node):
    def __init__(self):

        super().__init__('motor_control_node')
        self.declare_parameters(
            namespace='',
            parameters=[
                ('has_steer', 1),
                ('isDCSteer', 0),
                ('steer_center', 380),  # ¿¿¿ ¿¿¿
                ('steer_limit', 200),   # ¿¿¿ ¿¿¿
                ('speed_center', 0),
                ('speed_limit', 4096),
                ('i2cSteer', 64),
                ('i2cThrottle', 96),
                ('gpio_pin', 12),
           ])
        self.get_logger().info("Setting Up the Node...")

        self.hasSteer = self.get_parameter_or('has_steer').get_parameter_value().integer_value
        self.isDCSteer = self.get_parameter_or('isDCSteer').get_parameter_value().integer_value
        self.STEER_DIR = self.get_parameter_or('steer_dir').get_parameter_value().integer_value

        self.STEER_CENTER = self.get_parameter_or('steer_center').get_parameter_value().integer_value
        self.STEER_LIMIT = self.get_parameter_or('steer_limit').get_parameter_value().integer_value
        self.SPEED_CENTER = self.get_parameter_or('speed_center').get_parameter_value().integer_value
        self.SPEED_LIMIT = self.get_parameter_or('speed_limit').get_parameter_value().integer_value

        self.i2cSteer = self.get_parameter_or('i2cSteer').get_parameter_value().integer_value
        self.i2cThrottle = self.get_parameter_or('i2cThrottle').get_parameter_value().integer_value
        self.gpio_pin = self.get_parameter_or('gpio_pin').get_parameter_value().integer_value

        speed_pulse = 0
        steering_pulse = 0
        
        print('hasSteer: %s, i2cSteer: %s, i2cThrottle: %s'%
            (self.hasSteer,
            self.i2cSteer,
            self.i2cThrottle)
        )

        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.gpio_pin, GPIO.OUT)
        self.servo = GPIO.PWM(self.gpio_pin, 50)  # 50Hz PWM ¿¿¿ ¿¿
        self.servo.start(0)

        # RC car which has steering
        if self.hasSteer == 1:
            # Steer with DC motor driver
            if self.isDCSteer == 1:
                steer_controller = PCA9685(channel=0, address=self.i2cSteer, busnum=IIC_BUS, center=self.STEER_CENTER)
                self._steering = PWMSteering(controller=steer_controller, max_pulse=4095, zero_pulse=0, min_pulse=-4095)
            # Steer with servo motor
            else:
                self._steering = self.gpio_pin
            self.get_logger().info("Steering Controller Awaked!!")

            throttle_controller = PCA9685(channel=0, address=self.i2cThrottle, busnum=IIC_BUS, center=self.SPEED_CENTER)
            if self.i2cThrottle == 0x60:
                # Throttle with Jetracer
                self._throttle = PWMThrottleRacer(controller=throttle_controller, max_pulse=4095, zero_pulse=0, min_pulse=-4095)
            else:
                # Throttle with Motorhat B
                self._throttle = PWMThrottleHat(controller=throttle_controller, max_pulse=4095, zero_pulse=0, min_pulse=-4095)
            self.get_logger().info("Throttle Controller Awaked!!")

        # 2-wheel RC car
        else:
            throttle_controller = PCA9685(channel=0, address=self.i2cSteer, busnum=IIC_BUS, center=self.SPEED_CENTER)
            self._throttle = PWMThrottle2Wheel(controller=throttle_controller, max_pulse=4095, zero_pulse=0, min_pulse=-4095)
            self.get_logger().info("2-wheel Throttle Controller Awaked!!")

        self._teleop_sub = self.create_subscription(Twist, 'cmd_vel', self.cb_teleop, 10)
        self.get_logger().info("Keyboard Subscriber Awaked!! Waiting for keyboard/joystick...")

    def cb_teleop(self, msg):

        # self.get_logger().info("Received a /cmd_vel message!")
        self.get_logger().info("Components: [%0.2f, %0.2f]" % (msg.linear.x, msg.angular.z))

        # Do velocity processing here:
        # Use the kinematics of your robot to map linear and angular velocities into motor commands
        # linear.x: 0, 0+step...1.0, step=0.1
        speed_pulse = self.SPEED_CENTER + msg.linear.x * 3 * self.SPEED_LIMIT
        speed_pulse = clamp(speed_pulse, -self.SPEED_LIMIT + 1, self.SPEED_LIMIT - 1)

        # angular.z: 0, 0+step...1.0, step=0.1
        steering_pulse = self.STEER_CENTER - msg.angular.z * 3 * self.STEER_LIMIT
        steering_pulse = clamp(steering_pulse, self.STEER_CENTER - self.STEER_LIMIT, self.STEER_CENTER + self.STEER_LIMIT)

        if self.hasSteer == 1:
            print(
                "speed_pulse : "
                + str(speed_pulse)
                + " / "
                + "steering_pulse : "
                + str(steering_pulse)
            )
        else:
            print(
                "speed_pulse : "
                + str(speed_pulse)
                + " / "
                + "steer % : "
                + str(steering_pulse * 100 / self.STEER_LIMIT)
            )

        if self.hasSteer == 1:
            self._throttle.run(speed_pulse)
            self.set_servo_angle(steering_pulse)
        else:
            self._throttle.run(speed_pulse, steering_pulse)

    def set_servo_angle(self, pulse):
        pulse = clamp(pulse, 180, 580)  # ¿¿ ¿ ¿¿ ¿¿ ¿¿ ¿¿¿¿ ¿¿¿ ¿¿
        duty_cycle = pulse / 1000.0 * 10.0 + 2.5
        self.servo.ChangeDutyCycle(duty_cycle)

    def destroy_node(self):
        super().destroy_node()
        self.servo.stop()
        GPIO.cleanup()

def main(args=None):
    rclpy.init(args=args)
    myCar = VehicleNode()
    rclpy.spin(myCar)
    myCar.destroy_node()
    rclpy.shutdown()

if __name__ == "__main__":
    main()
